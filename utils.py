"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è CRM —Å–∏—Å—Ç–µ–º—ã
–í—ã–Ω–æ—Å–∏–º –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
"""
import os
import re
import logging
from typing import Optional
from database import get_user_by_session
from fastapi import Cookie

logger = logging.getLogger(__name__)

# ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

async def require_auth(session_token: Optional[str] = Cookie(None)):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not session_token:
        return None
    return get_user_by_session(session_token)


# ===== –ö–õ–ò–ï–ù–¢–´ =====

def get_client_display_name(client):
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: name > username > ID
    """
    if client[3]:  # name
        return client[3]
    elif client[1]:  # username
        return f"@{client[1]}"
    else:
        return client[0][:15] + "..."  # instagram_id


# ===== –ù–ï–ü–†–û–ß–ò–¢–ê–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø =====

def get_total_unread(get_all_clients_func, get_unread_messages_count_func):
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        get_all_clients_func: —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ database.py
        get_unread_messages_count_func: —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ database.py
    """
    clients = get_all_clients_func()
    total = 0
    for client in clients:
        total += get_unread_messages_count_func(client[0])
    return total


# ===== –°–¢–ê–¢–£–°–´ =====

def get_all_statuses(base_statuses, get_custom_statuses_func):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã (–±–∞–∑–æ–≤—ã–µ + –∫–∞—Å—Ç–æ–º–Ω—ã–µ)
    
    Args:
        base_statuses: CLIENT_STATUSES –∏–∑ config.py
        get_custom_statuses_func: —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ database.py
    """
    statuses = base_statuses.copy()
    custom = get_custom_statuses_func()
    for status in custom:
        statuses[status[1]] = {
            "label": status[2],
            "color": status[3],
            "icon": status[4]
        }
    return statuses


# ===== –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò =====

def ensure_upload_directories():
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫"""
    directories = [
        "static/uploads/images",
        "static/uploads/files",
        "static/uploads/voice"
    ]
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")


def sanitize_filename(filename: str) -> str:
    """
    –û—á–∏—Å—Ç–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        filename: –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å—ë –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫, –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π
    safe_name = re.sub(r'[^\w\s.-]', '', filename)
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
    safe_name = safe_name.replace(' ', '_')
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(safe_name) > 100:
        name, ext = os.path.splitext(safe_name)
        safe_name = name[:100] + ext
    return safe_name


def validate_file_upload(file, max_size_mb: int = 10, allowed_extensions: list = None):
    """
    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª
    
    Args:
        file: –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –∏–∑ FastAPI
        max_size_mb: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ MB
        allowed_extensions: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π (–±–µ–∑ —Ç–æ—á–∫–∏)
        
    Returns:
        tuple: (is_valid: bool, error_message: str or None)
    """
    if not file:
        return False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if allowed_extensions:
        ext = file.filename.split('.')[-1].lower()
        if ext not in allowed_extensions:
            return False, f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ. –†–∞–∑—Ä–µ—à–µ–Ω–æ: {', '.join(allowed_extensions)}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    # Note: file.size –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ FastAPI, –Ω—É–∂–Ω–æ —á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    
    return True, None


# ===== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï =====

def format_phone(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
    Returns:
        –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    """
    if not phone:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å—ë –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', phone)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã
    if len(digits) == 11:  # —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä
        return f"+{digits[0]} ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:]}"
    elif len(digits) == 12:  # –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã
        return f"+{digits[0:2]} ({digits[2:5]}) {digits[5:8]}-{digits[8:10]}-{digits[10:]}"
    else:
        return phone  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å


def format_currency(amount: float, currency: str = "AED") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É
    
    Args:
        amount: —Å—É–º–º–∞
        currency: –≤–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é AED)
        
    Returns:
        –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not amount:
        return f"0 {currency}"
    
    return f"{amount:,.2f} {currency}".replace(",", " ")


def truncate_text(text: str, max_length: int = 50, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    
    Args:
        text: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text or len(text) <= max_length:
        return text
    
    return text[:max_length].strip() + suffix


# ===== –í–ê–õ–ò–î–ê–¶–ò–Ø =====

def is_valid_email(email: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
    
    Args:
        email: –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
        
    Returns:
        True –µ—Å–ª–∏ email –≤–∞–ª–∏–¥–µ–Ω
    """
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))


def is_valid_phone(phone: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
    Returns:
        True –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω
    """
    # –£–±–∏—Ä–∞–µ–º –≤—Å—ë –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', phone)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä)
    return 10 <= len(digits) <= 15


def is_valid_instagram_username(username: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Instagram username
    
    Args:
        username: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)
        
    Returns:
        True –µ—Å–ª–∏ username –≤–∞–ª–∏–¥–µ–Ω
    """
    # Instagram username: –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è, –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
    pattern = r'^[a-zA-Z0-9._]{1,30}$'
    return bool(re.match(pattern, username))


# ===== –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ =====

def escape_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS
    
    Args:
        text: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    
    escape_dict = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '/': '&#x2F;'
    }
    
    for char, escaped in escape_dict.items():
        text = text.replace(char, escaped)
    
    return text


# ===== –î–ï–ë–ê–ì =====

def log_function_call(func_name: str, **kwargs):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    Args:
        func_name: –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        **kwargs: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
    """
    params = ", ".join([f"{k}={v}" for k, v in kwargs.items()])
    logger.debug(f"üìû –í—ã–∑–æ–≤: {func_name}({params})")


def log_error(error: Exception, context: str = ""):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    
    Args:
        error: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        context: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {context}: {type(error).__name__}: {str(error)}")
    import traceback
    logger.error(traceback.format_exc())