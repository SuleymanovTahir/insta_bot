"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CRM
–°–æ–∑–¥–∞–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª: logger.py
"""
import logging
import sys
from pathlib import Path

def setup_logger(name: str = "crm", log_file: str = "app.log") -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π logger
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "crm")
        log_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π logger
    """
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞—ë–º logger
    logger = logging.getLogger(name)
    
    # –ï—Å–ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if logger.handlers:
        return logger
    
    logger.setLevel(logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # Handler –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    
    # Handler –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(
        log_dir / log_file, 
        encoding='utf-8'
    )
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º handlers
    logger.addHandler(console_handler)
    logger.addHandler(file_handler)
    
    return logger


# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_info(message: str, module: str = "main"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç INFO —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logger.info(f"[{module}] {message}")


def log_error(message: str, module: str = "main", exc_info: bool = False):
    """–õ–æ–≥–∏—Ä—É–µ—Ç ERROR —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logger.error(f"[{module}] {message}", exc_info=exc_info)


def log_warning(message: str, module: str = "main"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç WARNING —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logger.warning(f"[{module}] {message}")


def log_debug(message: str, module: str = "main"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç DEBUG —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logger.debug(f"[{module}] {message}")


# logger.py - –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
def send_telegram_alert(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ Telegram"""
    import requests
    TELEGRAM_BOT_TOKEN = "your_token"
    TELEGRAM_CHAT_ID = "your_chat_id"
    
    requests.post(
        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
        json={"chat_id": TELEGRAM_CHAT_ID, "text": message}
    )

def log_critical(message, module, exc_info=True):
    logger.critical(f"[{module}] {message}", exc_info=exc_info)
    send_telegram_alert(f"üö® CRITICAL: {message}")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
def log_function_call(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        @log_function_call
        def my_function():
            pass
    """
    from functools import wraps
    
    @wraps(func)
    def wrapper(*args, **kwargs):
        func_name = func.__name__
        module_name = func.__module__
        
        logger.info(f"[{module_name}] –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}")
        
        try:
            result = func(*args, **kwargs)
            logger.info(f"[{module_name}] –§—É–Ω–∫—Ü–∏—è {func_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return result
        except Exception as e:
            logger.error(
                f"[{module_name}] –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: {str(e)}", 
                exc_info=True
            )
            raise
    
    return wrapper


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
__all__ = [
    'logger',
    'setup_logger',
    'log_info',
    'log_error',
    'log_warning',
    'log_debug',
    'log_critical',
    'log_function_call'
]