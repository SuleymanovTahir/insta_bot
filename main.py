from fastapi import FastAPI, Request, Form, Cookie, Query
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import traceback
from typing import Optional
import time
import os

# ===== –ò–ú–ü–û–†–¢ –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ì–û –õ–û–ì–ì–ï–†–ê =====
from logger import logger, log_info, log_error, log_warning, log_critical

# ===== –ò–ú–ü–û–†–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====
from config import VERIFY_TOKEN, SALON_INFO

# ===== –ò–ú–ü–û–†–¢–´ DATABASE =====
from database import (
    init_database, get_or_create_client, save_message,
    get_chat_history, get_booking_progress, update_booking_progress,
    clear_booking_progress, save_booking, get_stats,
    verify_user, create_session, delete_session, create_user
)

# ===== –ò–ú–ü–û–†–¢–´ BOT =====
from bot import ask_gemini, build_genius_prompt, extract_booking_info, is_booking_complete

# ===== –ò–ú–ü–û–†–¢–´ INSTAGRAM =====
from instagram import send_message, send_typing_indicator

# ===== –ò–ú–ü–û–†–¢–´ ADMIN =====
from admin import router as admin_router


# ===== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –î–ò–†–ï–ö–¢–û–†–ò–ô =====
def ensure_upload_directories():
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫"""
    directories = [
        "static/uploads/images",
        "static/uploads/files",
        "static/uploads/voice",
        "logs"
    ]
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    log_info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(directories)}", "startup")


# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
ensure_upload_directories()

# main.py
from fastapi import WebSocket

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FASTAPI =====
app = FastAPI(title=f"üíé {SALON_INFO['name']} CRM")


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message: {data}")


# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É –∏ —à–∞–±–ª–æ–Ω—ã
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
app.include_router(admin_router)


# ===== MIDDLEWARE –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô) =====
@app.middleware("http")
async def log_requests(request: Request, call_next):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏–∫—É
    if request.url.path.startswith("/static"):
        return await call_next(request)
    
    start_time = time.time()
    log_info(f"üî• {request.method} {request.url.path}", "middleware")
    
    try:
        response = await call_next(request)
        process_time = time.time() - start_time
        log_info(f"üì§ {request.method} {request.url.path} ‚Üí {response.status_code} ({process_time:.2f}s)", "middleware")
        return response
    except Exception as e:
        log_error(f"‚ùå –û–®–ò–ë–ö–ê: {request.method} {request.url.path}", "middleware", exc_info=True)
        raise

# main.py
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://mlediamant.com"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Trusted hosts
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=[
        "mlediamant.com", 
        "*.mlediamant.com",
        "localhost",           # Add this
        "127.0.0.1",          # Add this
        "127.0.0.1:8000"      # Add this (with port)
    ]
)

# Security headers
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    response = await call_next(request)
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    return response    


# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö =====
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """–õ–æ–≤–∏—Ç –í–°–ï –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"""
    log_critical(f"‚ùå –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {exc}", "exception_handler")
    log_error(f"üìç URL: {request.url}", "exception_handler")
    log_error(f"üìã Traceback:\n{traceback.format_exc()}", "exception_handler")
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": str(exc),
            "url": str(request.url)
        }
    )


# ===== –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–æ—É—Ç—ã =====
@app.on_event("startup")
async def show_routes():
    log_info("=" * 70, "startup")
    log_info("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã:", "startup")
    for route in app.routes:
        if hasattr(route, 'path'):
            methods = route.methods if hasattr(route, 'methods') else 'MOUNT'
            log_info(f"   {methods} {route.path}", "startup")
    log_info("=" * 70, "startup")


# ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====
@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request, error: str = None):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    try:
        log_info("–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞", "auth")
        return templates.TemplateResponse("admin/login.html", {
            "request": request,
            "salon_info": SALON_INFO,
            "error": error
        })
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ login_page: {e}", "auth", exc_info=True)
        raise


@app.post("/login")
async def login(request: Request, username: str = Form(...), password: str = Form(...)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        log_info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {username}", "auth")
        user = verify_user(username, password)

        if not user:
            log_warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –¥–ª—è {username}", "auth")
            return RedirectResponse(url="/login?error=–ù–µ–≤–µ—Ä–Ω—ã–π+–ª–æ–≥–∏–Ω+–∏–ª–∏+–ø–∞—Ä–æ–ª—å", status_code=302)

        session_token = create_session(user["id"])
        log_info(f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}", "auth")

        response = RedirectResponse(url="/admin", status_code=302)
        response.set_cookie(
            key="session_token",
            value=session_token,
            httponly=True,
            max_age=7*24*60*60,
            samesite="lax"
        )

        return response
    
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}", "auth", exc_info=True)
        return RedirectResponse(url="/login?error=–ü—Ä–æ–∏–∑–æ—à–ª–∞+–æ—à–∏–±–∫–∞.+–ü–æ–ø—Ä–æ–±—É–π—Ç–µ+—Å–Ω–æ–≤–∞", status_code=302)


@app.get("/logout")
async def logout(session_token: Optional[str] = Cookie(None)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if session_token:
            delete_session(session_token)
            log_info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã", "auth")

        response = RedirectResponse(url="/login", status_code=302)
        response.delete_cookie("session_token")
        return response
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}", "auth", exc_info=True)
        raise


@app.get("/register", response_class=HTMLResponse)
async def register_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        return templates.TemplateResponse("admin/register.html", {
            "request": request,
            "salon_info": SALON_INFO
        })
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ register_page: {e}", "auth", exc_info=True)
        raise


@app.post("/register")
async def register(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    full_name: str = Form(...),
    email: str = Form(None),
    role: str = Form("employee")
):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if len(username) < 3:
            log_warning(f"–õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {username}", "auth")
            return templates.TemplateResponse("admin/register.html", {
                "request": request,
                "salon_info": SALON_INFO,
                "error": "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
            })
        
        if len(password) < 6:
            log_warning(f"–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è {username}", "auth")
            return templates.TemplateResponse("admin/register.html", {
                "request": request,
                "salon_info": SALON_INFO,
                "error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            })
        
        if not full_name or len(full_name.strip()) < 2:
            log_warning(f"–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è {username}", "auth")
            return templates.TemplateResponse("admin/register.html", {
                "request": request,
                "salon_info": SALON_INFO,
                "error": "–ü–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
            })
        
        log_info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}", "auth")
        user_id = create_user(username, password, full_name, email, role)

        if not user_id:
            log_warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "auth")
            return templates.TemplateResponse("admin/register.html", {
                "request": request,
                "salon_info": SALON_INFO,
                "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            })

        log_info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (ID: {user_id})", "auth")
        return RedirectResponse(url="/login?success=–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –ú–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏", status_code=302)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}", "auth", exc_info=True)
        return templates.TemplateResponse("admin/register.html", {
            "request": request,
            "salon_info": SALON_INFO,
            "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        })


# ===== –í–ï–ë–•–£–ö–ò =====
@app.get("/webhook")
async def verify_webhook(request: Request):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –æ—Ç Meta"""
    try:
        mode = request.query_params.get("hub.mode")
        token = request.query_params.get("hub.verify_token")
        challenge = request.query_params.get("hub.challenge")

        if mode == "subscribe" and token == VERIFY_TOKEN:
            log_info("‚úÖ Webhook –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!", "webhook")
            return int(challenge)

        log_warning("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook", "webhook")
        return JSONResponse({"error": "Verification failed"}, status_code=403)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ verify_webhook: {e}", "webhook", exc_info=True)
        raise


from slowapi import Limiter
from slowapi.util import get_remote_address

limiter = Limiter(key_func=get_remote_address)

@app.post("/webhook")
@limiter.limit("10/minute")
async def handle_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Instagram"""
    try:
        data = await request.json()
        log_info("=" * 70, "webhook")
        log_info("üì® –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï", "webhook")
        log_info("=" * 70, "webhook")

        if data.get("object") == "instagram":
            for entry in data.get("entry", []):
                for messaging in entry.get("messaging", []):
                    sender_id = messaging.get("sender", {}).get("id")

                    if "message" in messaging:
                        if messaging["message"].get("is_echo"):
                            continue

                        message_text = messaging["message"].get("text", "")
                        if not message_text.strip():
                            continue

                        log_info(f"üë§ –û—Ç –∫–ª–∏–µ–Ω—Ç–∞: {sender_id}", "webhook")
                        log_info(f"üí¨ –¢–µ–∫—Å—Ç: {message_text}", "webhook")

                        get_or_create_client(sender_id)
                        save_message(sender_id, message_text, "client")
                        await send_typing_indicator(sender_id)

                        history = get_chat_history(sender_id, limit=10)
                        progress = get_booking_progress(sender_id)
                        genius_prompt = build_genius_prompt(sender_id, history, progress)

                        log_info("ü§ñ –°–ø—Ä–∞—à–∏–≤–∞—é Gemini AI...", "webhook")
                        ai_response = await ask_gemini(message_text, genius_prompt)
                        log_info(f"‚úÖ –û—Ç–≤–µ—Ç AI: {ai_response[:150]}...", "webhook")

                        updated_progress = extract_booking_info(message_text, progress)

                        if updated_progress and updated_progress != progress:
                            update_booking_progress(sender_id, updated_progress)
                            log_info(f"üìù –û–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: {updated_progress}", "webhook")

                        if "BOOKING_READY" in ai_response and updated_progress:
                            if is_booking_complete(updated_progress):
                                log_info("üéâ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "webhook")
                                
                                datetime_str = f"{updated_progress.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} {updated_progress.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
                                save_booking(
                                    sender_id,
                                    updated_progress.get('service_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                                    datetime_str,
                                    updated_progress.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                                    updated_progress.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                                )

                                clear_booking_progress(sender_id)

                                confirmation = f"""‚ú® –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã! 

üìÖ {updated_progress.get('date')} –≤ {updated_progress.get('time')}
üíÖ {updated_progress.get('service_name')}
üë§ {updated_progress.get('name')}
üìû {updated_progress.get('phone')}

–ñ–¥—ë–º –≤–∞—Å –≤ {SALON_INFO['name']}! üòä
{SALON_INFO['address']}"""

                                save_message(sender_id, confirmation, "bot")
                                await send_message(sender_id, confirmation)
                            else:
                                clean_response = ai_response.replace("BOOKING_READY", "").strip()
                                save_message(sender_id, clean_response, "bot")
                                await send_message(sender_id, clean_response)
                        else:
                            save_message(sender_id, ai_response, "bot")
                            await send_message(sender_id, ai_response)

                        log_info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É!", "webhook")

        log_info("=" * 70, "webhook")
        return {"status": "ok"}
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_webhook: {e}", "webhook", exc_info=True)
        raise


# ===== API –≠–ù–î–ü–û–ò–ù–¢–´ =====
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        return templates.TemplateResponse("index.html", {
            "request": request,
            "title": "–û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å",
            "salon_info": SALON_INFO
        })
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ index: {e}", "api", exc_info=True)
        raise


@app.post("/book", response_class=HTMLResponse)
async def book(request: Request, name: str = Form(...), phone: str = Form(...), service: str = Form(...)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏"""
    try:
        log_info(f"üìò –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {name} ‚Äî {phone} ‚Äî {service}", "booking")
        return templates.TemplateResponse(
            "success.html",
            {
                "request": request,
                "title": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                "name": name,
                "service": service,
                "salon_info": SALON_INFO
            },
        )
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ book: {e}", "booking", exc_info=True)
        raise


@app.get("/api")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "status": "‚úÖ CRM —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "salon": SALON_INFO['name'],
        "bot": SALON_INFO['bot_name'],
        "version": "2.0.0",
        "features": [
            "AI-–≥–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂ (Gemini 2.5 Flash)",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è CRM —Å –¥–∞—à–±–æ—Ä–¥–æ–º",
            "–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π",
            "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤",
            "–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã",
            "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å (RU/EN/AR)"
        ]
    }


@app.get("/forgot-password", response_class=HTMLResponse)
async def forgot_password_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    try:
        return templates.TemplateResponse("admin/forgot_password.html", {
            "request": request,
            "salon_info": SALON_INFO
        })
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ forgot_password_page: {e}", "auth", exc_info=True)
        raise


@app.post("/forgot-password")
async def forgot_password(request: Request, email: str = Form(...)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    try:
        from database import get_user_by_email, create_password_reset_token
        from config import SMTP_SERVER, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD, FROM_EMAIL
        import ssl

        log_info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è {email}", "auth")
        user = get_user_by_email(email)

        if not user:
            log_warning(f"Email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω", "auth")
            return templates.TemplateResponse("admin/forgot_password.html", {
                "request": request,
                "salon_info": SALON_INFO,
                "success": "–ï—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ—á—Ç—É"
            })

        token = create_password_reset_token(user["id"])
        reset_link = f"https://mlediamant.com/reset-password?token={token}"

        try:
            msg = MIMEMultipart('alternative')
            msg['Subject'] = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - M.Le Diamant CRM"
            msg['From'] = FROM_EMAIL
            msg['To'] = email

            text = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['full_name']}!

–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è CRM —Å–∏—Å—Ç–µ–º—ã M.Le Diamant.

–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
{reset_link}

–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å.

–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.

---
M.Le Diamant Beauty Lounge
{SALON_INFO['address']}
            """

            html = f"""
            <html>
              <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
                <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                  <h2 style="color: #667eea;">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
                  <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>{user['full_name']}</strong>!</p>
                  <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è CRM —Å–∏—Å—Ç–µ–º—ã M.Le Diamant.</p>
                  <p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
                  <div style="text-align: center; margin: 30px 0;">
                    <a href="{reset_link}" style="background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>
                  </div>
                  <p style="font-size: 12px; color: #666;">–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å.</p>
                  <p style="font-size: 12px; color: #666;">–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                  <hr style="margin: 30px 0; border: none; border-top: 1px solid #ddd;">
                  <p style="font-size: 12px; color: #999;">
                    M.Le Diamant Beauty Lounge<br>
                    {SALON_INFO['address']}
                  </p>
                </div>
              </body>
            </html>
            """

            part1 = MIMEText(text, 'plain', 'utf-8')
            part2 = MIMEText(html, 'html', 'utf-8')

            msg.attach(part1)
            msg.attach(part2)

            context = ssl.create_default_context()
            
            log_info(f"üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {email}...", "email")
            
            with smtplib.SMTP(SMTP_SERVER, SMTP_PORT, timeout=10) as server:
                server.set_debuglevel(1)
                server.ehlo()
                server.starttls(context=context)
                server.ehlo()
                server.login(SMTP_USERNAME, SMTP_PASSWORD)
                server.send_message(msg)

            log_info(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}", "email")
            
        except smtplib.SMTPAuthenticationError as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP: {e}", "email")
        except smtplib.SMTPException as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ SMTP: {e}", "email")
        except Exception as e:
            log_error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}", "email", exc_info=True)

        return templates.TemplateResponse("admin/forgot_password.html", {
            "request": request,
            "salon_info": SALON_INFO,
            "success": "–ï—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ—á—Ç—É"
        })
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ forgot_password: {e}", "auth", exc_info=True)
        raise


@app.get("/reset-password", response_class=HTMLResponse)
async def reset_password_page(request: Request, token: str = Query(...)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        from database import verify_reset_token

        user_id = verify_reset_token(token)

        if not user_id:
            log_warning("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è", "auth")
            return templates.TemplateResponse("admin/reset_password.html", {
                "request": request,
                "salon_info": SALON_INFO,
                "error": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∞—è —Å—Å—ã–ª–∫–∞"
            })

        return templates.TemplateResponse("admin/reset_password.html", {
            "request": request,
            "salon_info": SALON_INFO,
            "token": token
        })
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ reset_password_page: {e}", "auth", exc_info=True)
        raise


@app.post("/reset-password")
async def reset_password(
    request: Request,
    token: str = Form(...),
    password: str = Form(...),
    confirm_password: str = Form(...)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        from database import verify_reset_token, reset_user_password, mark_reset_token_used

        if password != confirm_password:
            log_warning("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", "auth")
            return templates.TemplateResponse("admin/reset_password.html", {
                "request": request,
                "salon_info": SALON_INFO,
                "token": token,
                "error": "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            })

        if len(password) < 6:
            log_warning("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π", "auth")
            return templates.TemplateResponse("admin/reset_password.html", {
                "request": request,
                "salon_info": SALON_INFO,
                "token": token,
                "error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            })

        user_id = verify_reset_token(token)

        if not user_id:
            log_warning("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è", "auth")
            return templates.TemplateResponse("admin/reset_password.html", {
                "request": request,
                "salon_info": SALON_INFO,
                "error": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∞—è —Å—Å—ã–ª–∫–∞"
            })

        reset_user_password(user_id, password)
        mark_reset_token_used(token)

        log_info(f"–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", "auth")
        return RedirectResponse(url="/login?success=–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω", status_code=302)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ reset_password: {e}", "auth", exc_info=True)
        raise


@app.get("/stats")
async def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        return get_stats()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ stats: {e}", "api", exc_info=True)
        raise


@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        stats = get_stats()
        return {
            "status": "healthy",
            "database": "connected",
            "gemini_ai": "active",
            "total_clients": stats['total_clients'],
            "total_bookings": stats['total_bookings']
        }
    except Exception as e:
        log_error(f"Health check failed: {e}", "health", exc_info=True)
        return {
            "status": "error",
            "error": str(e)
        }


@app.get("/privacy-policy", response_class=HTMLResponse)
async def privacy_policy(request: Request):
    """–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        return templates.TemplateResponse("privacy-policy.html", {
            "request": request,
            "title": "Privacy Policy",
            "content": (
                "This app automatically replies to Instagram messages. "
                "We do not collect, store, or share personal user data. "
                "If you want to delete your data, contact us at mladimontuae@gmail.com."
            ),
            "salon_info": SALON_INFO
        })
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ privacy_policy: {e}", "api", exc_info=True)
        raise


@app.get("/terms", response_class=HTMLResponse)
async def terms_of_service(request: Request):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"""
    try:
        return templates.TemplateResponse("terms.html", {
            "request": request,
            "title": "Terms of Service",
            "content": (
                "By messaging our Instagram page, you agree that our system may "
                "automatically reply to your inquiries about our salon services. "
                "All conversations are confidential and not shared with third parties."
            ),
            "salon_info": SALON_INFO
        })
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ terms_of_service: {e}", "api", exc_info=True)
        raise


# ===== –ó–ê–ü–£–°–ö =====
@app.on_event("startup")
async def startup_event():
    """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        log_info("=" * 70, "startup")
        log_info("üöÄ –ó–∞–ø—É—Å–∫ CRM —Å–∏—Å—Ç–µ–º—ã...", "startup")
        log_info(f"üíé –°–∞–ª–æ–Ω: {SALON_INFO['name']}", "startup")
        log_info(f"ü§ñ –ë–æ—Ç-–≥–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂: {SALON_INFO['bot_name']}", "startup")
        log_info(f"üìç –ê–¥—Ä–µ—Å: {SALON_INFO['address']}", "startup")
        log_info("=" * 70, "startup")

        init_database()

        log_info("‚úÖ CRM –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!", "startup")
        log_info("üîê –õ–æ–≥–∏–Ω: http://localhost:8000/login", "startup")
        log_info("üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:8000/admin", "startup")
        log_info("üìà –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂: http://localhost:8000/admin/funnel", "startup")
        log_info("üìâ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: http://localhost:8000/admin/analytics", "startup")
        log_info("=" * 70, "startup")
    except Exception as e:
        log_critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï: {e}", "startup")
        raise


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )